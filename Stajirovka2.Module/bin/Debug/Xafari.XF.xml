<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xafari.XF</name>
    </assembly>
    <members>
        <member name="F:ProductInfo.IdentityVersion">
            <summary>
            This version used in code to identity product
            </summary>
        </member>
        <member name="T:Xafari.XF.Diagnostics.XFDiagnosticService">
            <summary>
            For internal use.
            Check that entities was created by <see cref="M:Xafari.BC.Helpers.IObjectSpaceHelper.CreateObject(System.Type)"/> method.
            </summary>
            <remarks>
            Activated just in DEBUG configuration.
            </remarks>
        </member>
        <member name="M:Xafari.XF.Helpers.XFITypesInfoHelperExtension.FindEntityTypeInfo(System.Type)">
            <summary>
            Returns <see cref="T:DevExpress.ExpressApp.DC.ITypeInfo"/> for entity by the specified <paramref name="realType"/>.
            </summary>
            <param name="realType"></param>
            <returns></returns>
        </member>
        <member name="P:Xafari.XF.Helpers.XFTypeHelperExtension.EntityInfo">
            <summary>
            Returns <see cref="P:Xafari.XF.Helpers.XFTypeHelperExtension.EntityInfo"/> object for the current entity type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xafari.XF.Helpers.XFTypeHelperExtension.RegisterRealEntityType(System.Type)">
            <summary>
            Registers <paramref name="realEntityType"/> for the current entity type.
            </summary>
            <param name="realEntityType">Real entity Type.</param>
        </member>
        <member name="M:Xafari.XF.Helpers.XFTypeHelperExtension.FindRealEntityType">
            <summary>
            Returns real type for entity type.
            </summary>
            <returns>Returns value of for the current entity type, if real type is not exist.</returns>
        </member>
        <member name="M:Xafari.XF.Helpers.XFTypeHelperExtension.FindEntityType">
            <summary>
            Returns <see cref="T:System.Type"/> of entity by the specified for the current real type.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Xafari.XF.Helpers.XFTypeHelperExtension.IsEntity">
            <summary>
            Checks than <paramref name="entityType"/> is entity.
            </summary>
            <param name="entityType"></param>
            <returns><b>true</b> is <paramref name="entityType"/> registered as entity.</returns>
        </member>
        <member name="P:Xafari.XF.Helpers.XFTypeHelperExtension.IsEntityExtension">
            <summary>
            Checks than <paramref name="entityExtensionType"/> is entity extension.
            </summary>
            <param name="entityExtensionType"></param>
            <returns><b>true</b> is <paramref name="entityExtensionType"/> registered as entity extension.</returns>
        </member>
        <member name="P:Xafari.XF.Helpers.XFTypeHelperExtension.EntityExtensionInfo">
            <summary>
            Returns an <see cref="P:Xafari.XF.Helpers.XFTypeHelperExtension.EntityExtensionInfo"/> object for specified <paramref name="entityExtensionType"/>.
            </summary>
            <param name="entityExtensionType"></param>
            <returns></returns>
        </member>
        <member name="M:Xafari.XF.Helpers.XFTypeHelperExtension.RootQueryablePersistentType4DomainComponentEntityOrExtension">
            <summary>
            Find real persistent type for quering XF entities and extensions
            </summary>
            <param name="domainComponentType">Any domain component type</param>
            <returns></returns>
        </member>
        <member name="T:Xafari.XF.Model.NodeGenerators.EntityModelDetailViewItemsNodesGenerator">
            <summary>
            102.169446 Remove autogenerated extension nodes
            </summary>
        </member>
        <member name="T:Xafari.XF.Model.NodeGenerators.EntityModelListViewColumnsNodesGeneratorUpdater">
            <summary>
            102.169446 Remove autogenerated extension nodes
            </summary>
        </member>
        <member name="T:Xafari.XF.Model.NodeGenerators.EntityExtensionNodesGenerator">
            <summary>
            Generates extensions link nodes for entity.
            </summary>
        </member>
        <member name="T:Xafari.XF.Model.NodeGenerators.EntityModelBOModelMemberNodesGeneratorUpdater">
            <summary>
            Generates calculated custom members to linking entity and extensions.
            </summary>
        </member>
        <member name="T:Xafari.XF.Model.NodeGenerators.EntityModelNodesGeneratorUpdater">
            <summary>
            Updates real type node for entity.
            </summary>
        </member>
        <member name="T:Xafari.XF.RegisterExtensionAttribute">
            <summary>
            Specifies register entity extension parameters.
            </summary>
        </member>
        <member name="P:Xafari.XF.RegisterExtensionAttribute.EntityType">
            <summary>
            Specifies entity <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:Xafari.XF.RegisterExtensionAttribute.PropertyName">
            <summary>
            Specifies extension reference property name which will be added to entity.
            </summary>
        </member>
        <member name="P:Xafari.XF.RegisterExtensionAttribute.BackPropertyName">
            <summary>
            Specifies entity back reference property name which will be added to extension.
            </summary>
        </member>
        <member name="P:Xafari.XF.RegisterExtensionAttribute.ExpandObjectMembers">
            <summary>
            Specifies strategy to display extensions on entity detail view. By default, <see cref="F:DevExpress.Persistent.Base.ExpandObjectMembers.Never"/>.
            </summary>
        </member>
        <member name="P:Xafari.XF.RegisterExtensionAttribute.AutoCreate">
            <summary>
            Specifies how extension instance creating. By default, <b>true</b>.
            </summary>
        </member>
        <member name="P:Xafari.XF.RegisterExtensionAttribute.StaticExtensionsType">
            <summary>
            Specifies the static method extensions <see cref="T:System.Type"/> which used by entity-extension navigation.
            </summary>
        </member>
        <member name="P:Xafari.XF.Runtime.EntityExtensionInfo.ExtensionType">
            <summary>
            Gets extension <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:Xafari.XF.Runtime.EntityExtensionInfo.ExtensionTypeInfo">
            <summary>
            Gets extension <see cref="T:DevExpress.ExpressApp.DC.ITypeInfo"/>.
            </summary>
        </member>
        <member name="P:Xafari.XF.Runtime.EntityExtensionInfo.DeclaringEntity">
            <summary>
            Gets declaring <see cref="T:Xafari.XF.Runtime.EntityInfo"/> for this extension.
            </summary>
        </member>
        <member name="P:Xafari.XF.Runtime.EntityExtensionInfo.AutoCreate">
            <summary>
            Indicates than persistent extension instnace must be created on entity is created.
            </summary>
        </member>
        <member name="P:Xafari.XF.Runtime.EntityExtensionInfo.AsEntity">
            <summary>
            Gets a <see cref="T:Xafari.XF.Runtime.EntityInfo"/> object for this extension object.
            </summary>
        </member>
        <member name="P:Xafari.XF.Runtime.EntityExtensionInfo.PropertyName">
            <summary>
            Specifies property name for generated custom member.
            </summary>
        </member>
        <member name="P:Xafari.XF.Runtime.EntityExtensionInfo.BackPropertyName">
            <summary>
            Specifies back property name for generated custom member.
            Used for persistent extensions.
            </summary>
        </member>
        <member name="M:Xafari.XF.Runtime.EntityExtensionInfo.GetCalculatedExtensionPropertyName(Xafari.XF.Runtime.EntityInfo)">
            <summary>
            Returns property name for calculated member of entity.
            </summary>
            <param name="entityInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Xafari.XF.Runtime.XFStrategy.OnXafTypesInfoSetupComplete(DevExpress.ExpressApp.DC.ITypesInfo)">
            <summary>
            Вызывается из аналогичного метода <see cref="M:Xafari.BC.XafariModuleBase.OnXafTypesInfoSetupComplete(DevExpress.ExpressApp.DC.ITypesInfo)"/>.
            </summary>
            <param name="typesInfo"></param>
        </member>
        <member name="M:Xafari.XF.Runtime.XFStrategy.UpdateExtsXPMemberInfos">
            <summary>
            Update <see cref="P:DevExpress.Xpo.Metadata.XPMemberInfo.ReferenceType"/> for Exts members in all persistent entities.
            </summary>
            <remarks>
            Обновляет объекты <see cref="T:DevExpress.Xpo.Metadata.XPMemberInfo"/> для созданных в методе <see cref="M:Xafari.XF.Runtime.XFStrategy.AddCustomMembers(DevExpress.ExpressApp.DC.ITypesInfo)"/> custom members.
            </remarks>
        </member>
        <member name="M:Xafari.XF.Runtime.XFStrategy.CustomizeTypesInfo(DevExpress.ExpressApp.DC.ITypesInfo)">
            <summary>
            Add <see cref="T:Xafari.BC.AliveTypeAttribute"/> for entities.
            </summary>
            <param name="typesInfo"></param>
        </member>
        <member name="T:Xafari.XF.Runtime.XFStrategyV1">
            <summary>
            Version 1. See details
            </summary>
            <remarks>
            This strategy:
            <list type="number">
            <item><description>Generates XFAssembly</description></item>
            <item><description>Generates derived DC with names "_name"</description></item>
            <item><description>Used "Exts" property</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Xafari.XF.Runtime.EntityInfo.RegisterEntityBaseType">
            <summary>
            Base <see cref="T:System.Type"/> for register entity by method <see cref="!:XafTypesInfo.RegisterEntity"/>.
            </summary>
        </member>
        <member name="P:Xafari.XF.Runtime.EntityInfo.RegisterEntityName">
            <summary>
            Entity name for register entity by method <see cref="!:XafTypesInfo.RegisterEntity"/>.
            </summary>
        </member>
        <member name="P:Xafari.XF.Runtime.EntityInfo.Extensions">
            <summary>
            Gets extensions for current entity
            </summary>
        </member>
        <member name="T:Xafari.XF.Runtime.XFWeakListCustomizeTypesInfoHelper.XFBackReferenceXPMemberInfoUpdater_ByAssociation">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:Xafari.XF.Runtime.XFWeakListCustomizeTypesInfoHelper.XFBackReferenceXPMemberInfoUpdater_ByWeakReference">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:Xafari.XF.Runtime.RegisterExtensionConvertor`2">
            <summary>
            Register function which is used for converting from/to XF Entity/Extension
            To use some function in XFQuery Linq expressions it should be registered
            </summary>
            <typeparam name="TEntityOrExtensionArgument"></typeparam>
            <typeparam name="TEntityOrExtensionResult"></typeparam>
        </member>
        <member name="M:Xafari.XF.Runtime.RegisterExtensionConvertor`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Register a method as default convertor from entity to its extension for using in Linq XPQuery expressions
            </summary>
            <typeparam name="TEntityOrExtensionArgument">Type of Entity</typeparam>
            <typeparam name="TEntityOrExtensionResult">Type of Extension</typeparam>
            <param name="entity2ExtensionConvertorMethod">Expression which defines the convertor method. I.e. entity => Extension(entity)</param>
        </member>
        <member name="M:Xafari.XF.Runtime.RegisterFunction4XPQueryLinq.#ctor(System.Reflection.MethodInfo,System.String)">
            <summary>
            Provide ability to use some function in Linq XPQuery expressions by applying Devexpress XPO criteria
            </summary>
            <param name="methodInfo">The Method is used in Linq</param>
            <param name="criteria">Criteria which is applied to argument to get result</param>
        </member>
        <member name="T:Xafari.XF.Runtime.RegisterFunction4XPQueryLinq`2">
            <summary>
            Provide ability to use some function in Linq XPQuery or XFQuery expressions by applying Devexpress XPO criteria
            </summary>
            <typeparam name="TArgument">Type of function argument</typeparam>
            <typeparam name="TResult">Type of function result</typeparam>
        </member>
        <member name="M:Xafari.XF.Runtime.RegisterFunction4XPQueryLinq`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.String)">
            <summary>
            Provide ability to use some function in Linq XPQuery expressions by applying Devexpress XPO criteria
            </summary>
            <param name="extensionMethod">The Method is used in Linq</param>
            <param name="criteria">Criteria which is applied to argument to get result</param>
        </member>
        <member name="T:Xafari.XF.Extensions">
            <summary>
            Xafari.XF internal extension helper methods
            </summary>
        </member>
        <member name="M:Xafari.XF.Extensions.GetMethodInfo(System.Linq.Expressions.LambdaExpression)">
             <summary>
             GetMethodInfo is helper for extracting MethodInfo from Lambda expression
             The expresssion must be simple MethodCallExpression
             </summary>
             <param name="lambda"></param>
             <returns>MethodInfo from lambda.Body</returns>
            <example><![CDATA[
            public class GetMethodInfoExample
            {
              public static string MyMethod<T>(T someArgument)
              {
                return someArgument.ToString();
              }
              private string MySampleStringMethod()
              {
                return "HelloWorld";
              }
              public override string ToString()
              {
                return MySampleStringMethod();
              }
              protected string MyProperty
              {
                get { return "MyPropertyValue"; }
              }
              public static void Main()
              {
                Console.WriteLine(GetStringFunctionDescription<int>(arg0 => MyMethod(arg0)));
                Console.WriteLine(GetStringFunctionDescription<double>(arg0 => MyMethod(arg0)));
                Console.WriteLine(GetStringFunctionDescription<object>(arg0 => MyMethod(arg0)));
                Console.WriteLine(GetStringFunctionDescription<int>(arg0 => arg0.ToString()));
                Console.WriteLine(GetStringFunctionDescription<GetMethodInfoExample>(arg0 => arg0.MySampleStringMethod()));
              }
              public static string GetStringFunctionDescription<T>(Expression<Func<T, string>> exp)
              {
                var mi = exp.GetMethodInfo();
                return "Method " + mi + " is declared in " + mi.DeclaringType;
              }
            }
            ]]></example>
        </member>
        <member name="M:Xafari.XF.Extensions.RootQueryablePersistentType4DomainComponentEntityOrExtension(System.Type)">
            <summary>
            Find real persistent type for quering XF entities and extensions
            </summary>
            <param name="domainComponentType">Any domain component type</param>
            <returns></returns>
        </member>
        <member name="M:Xafari.XF.Extensions.XF(Xafari.Helpers.TypeHelper)">
            <summary>
            Gets XF <see cref="T:Xafari.Helpers.TypeHelper"/> extension.
            </summary>
        </member>
        <member name="M:Xafari.XF.Extensions.XF(Xafari.Helpers.ITypesInfoHelper)">
            <summary>
            Gets XF <see cref="T:Xafari.Helpers.ITypesInfoHelper"/> extension.
            </summary>
        </member>
        <member name="M:Xafari.XF.Extensions.XF(Xafari.Helpers.XafApplicationHelper)">
            <summary>
            Gets XF <see cref="T:Xafari.Helpers.XafApplicationHelper"/> extension.
            </summary>
        </member>
        <member name="P:Xafari.XF.IXFExternalEntityExtension.Owner">
            <summary>
            Gets and sets object owner.
            </summary>
        </member>
        <member name="T:Xafari.XF.IXFRegistrator">
            <summary>
            Declares methods to register XF enities and extensions. Implemented by <see cref="T:DevExpress.ExpressApp.ModuleBase"/> classes.
            </summary>
        </member>
        <member name="M:Xafari.XF.IXFRegistrator.RegisterXF(Xafari.EntityFactory)">
            <summary>
            Register XF entities and extensions when implement method.
            </summary>
            <param name="entityFactory"></param>
        </member>
        <member name="T:Xafari.XF.IXFRegistrator_Extensions">
            <summary>
            Provides methods to perform entities and extensions registration.
            </summary>
        </member>
        <member name="M:Xafari.XF.IXFRegistrator_Extensions.RegisterEntity``1(Xafari.XF.IXFRegistrator,System.String,System.Type,System.String)">
            <summary>
            Register <typeparamref name="TEntity"/> with specified <paramref name="baseType"/>, <paramref name="nameSpace"/> and <paramref name="entityName"/>.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="registrator"></param>
            <param name="nameSpace">Specifies namespace for entity table.</param>
            <param name="entityName">Specifies entity table name.</param>
            <param name="baseType">Base type for generated DC class. By default used <see cref="T:Xafari.BC.DC.XafariDCBaseObject"/>.</param>
            <returns></returns>
            <remarks>
            <para>
            if <paramref name="baseType"/> is <b>null</b> use <see cref="T:Xafari.BC.DC.XafariDCBaseObject"/> as base type for <typeparamref name="TEntity"/> which supported <see cref="T:Xafari.XF.IXFEntity"/>;
            otherwise uses <b>null</b>.
            </para>
            <example>
            Code show how to use method to register entity <b>Contact</b> with default base type <see cref="T:Xafari.BC.DC.XafariDCBaseObject"/>.
            <code>
            void IXFRegistrator.RegisterXF(EntityFactory entityFactory)
            {
            	this.RegisterEntity&lt;Customer&gt;();
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Xafari.XF.IXFRegistrator_Extensions.RegisterEntity``2(Xafari.XF.IXFRegistrator,System.String,System.String)">
            <summary>
            Register <typeparamref name="TEntity"/> with <typeparamref name="TBaseType"/> with specified <paramref name="nameSpace"/> and <paramref name="entityName"/>.
            </summary>
            <param name="registrator"></param>
            <param name="nameSpace">Specifies namespace for entity table.</param>
            <param name="entityName">Specifies entity table name.</param>
            <remarks>
            <example>
            Code show how to use method to register entity <b>Contact</b> with specified base type <b>MyBaseType</b>.
            <code>
            void IXFRegistrator.RegisterXF(EntityFactory entityFactory)
            {
            	this.RegisterEntity&lt;Customer, MyBaseType&gt;();
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Xafari.XF.IXFRegistrator_Extensions.RegisterExtension``2(Xafari.XF.IXFRegistrator,System.String,System.String,DevExpress.Persistent.Base.ExpandObjectMembers,System.Boolean,System.String,System.Type,System.String)">
            <summary>
            Register extension <typeparamref name="TExtension"/> for entity <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity</typeparam>
            <typeparam name="TExtension">Type of extension</typeparam>
            <param name="propertyName">Specifies property name for extension</param>
            <param name="backPropertyName">Specifies entity back property name</param>
            <param name="expandObjectMembers">Specifies strategy to display extensions on entity detail view. By default, <see cref="F:DevExpress.Persistent.Base.ExpandObjectMembers.Never"/>.</param>
            <param name="autoCreate">Specifies how eextension instance creating. By default, <b>true</b>.</param>
            <param name="nameSpace">Specifies namespace for entity table.</param>
            <param name="entityName">Specifies entity table name.</param>
            <param name="baseType">Specifies base type.</param>
            <param name="registrator"></param>
            <remarks>
            <example>
            Code show how to use method to register extension <b>XContact_Customer</b> for entity <b>Contact</b>.
            Additionally extension property <i>Customer</i> and entity back property <i>Contact</i> are specified.
            <code>
            void IXFRegistrator.RegisterXF(EntityFactory entityFactory)
            {
            	this.RegisterExtension&lt;Contact, XContact_Customer&gt;("Customer", "Contact");
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Xafari.XF.IXFRegistrator_Extensions.RegisterExtension``2(Xafari.XF.IXFRegistrator,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``0}},DevExpress.Persistent.Base.ExpandObjectMembers,System.Boolean,System.String,System.Type,System.String)">
            <summary>
            Register extension <typeparamref name="TExtension"/> for entity <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity</typeparam>
            <typeparam name="TExtension">Type of extension</typeparam>
            <param name="entityAccessor">Expression to access entity object from extension.</param>
            <param name="extensionAccessor">Expression to access extension object from entity.</param>
            <param name="expandObjectMembers">Specifies strategy to display extensions on entity detail view. By default, <see cref="F:DevExpress.Persistent.Base.ExpandObjectMembers.Never"/>.</param>
            <param name="autoCreate">Specifies how eextension instance creating. By default, <b>true</b>.</param>
            <param name="nameSpace">Specifies namespace for entity table.</param>
            <param name="entityName">Specifies entity table name.</param>
            <param name="baseType">Specifies base type.</param>
            <param name="registrator"></param>
            <remarks>
            <example>
            Code show how to use method to register extension <b>XContact_Customer</b> for entity <b>Contact</b>.
            Additionally extension property <i>Customer</i> and entity back property <i>Contact</i> register by using lambda expression.
            <code>
            void IXFRegistrator.RegisterXF(EntityFactory entityFactory)
            {
            	this.RegisterExtension&lt;Contact, XContact_Customer&gt;(a => a.Customer(), b => b.Contact());
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="T:Xafari.XF.PersistentAlias4MethodAttribute">
            <summary>
            Attribute which allow to set PersistentAlias for method.
            </summary>
        </member>
        <member name="P:Xafari.XF.PersistentAlias4MethodAttribute.AliasExpression">
            <summary>
            <para>
            Gets the criteria expression.
            </para>
            </summary>
            <value>
            A <see cref="T:System.String"/> value which specifies the criteria expression.
            </value>
        </member>
        <member name="M:Xafari.XF.PersistentAlias4MethodAttribute.#ctor(System.String)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:Xafari.PersistentAlias4MethodAttribute"/> class.
            </para>
            </summary>
            <param name="aliasExpression">A <see cref="T:System.String"/> value which specifies the criteria expression which is substitutes instead of the method<see cref="P:DevExpress.Xpo.PersistentAliasAttribute.AliasExpression"/>.
            </param>
        </member>
        <member name="T:Xafari.XF.RegisterExtension`2">
            <summary>
            Helper class for XF Extension registration
            </summary>
            <typeparam name="TEntity">Type of XF Entity</typeparam>
            <typeparam name="TExtension">Type of XF Extension</typeparam>
        </member>
        <member name="T:Xafari.XF.XFQuery`1">
            <summary>
            Class for Linq query to DomainComponents with Xafari Framework (XF) Extensions 
            (XPQuery replacement)
            </summary>
            <typeparam name="T">Type for query</typeparam>
        </member>
        <member name="F:Xafari.XF.XafariXFModule.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Xafari.XF.XafariXFModule.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Xafari.XF.XafariXFModule.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Xafari.EntityFactory">
            <summary>
            Provides methods to register business entities and operate it on runtime.
            </summary>
            <summary>
            Provides methods to register business entities and operate it on runtime.
            </summary>
        </member>
        <member name="F:Xafari.EntityFactory.Instance">
            <summary>
            Gets the <see cref="T:Xafari.EntityFactory"/> for current <see cref="T:System.Threading.Thread"/>.
            </summary>
        </member>
        <member name="M:Xafari.EntityFactory.#cctor">
            <summary>
            Initializes static fileds for <see cref="T:Xafari.EntityFactory"/>.
            </summary>
        </member>
        <member name="M:Xafari.EntityFactory.IsDeclaredEntity(System.Type)">
            <summary>
            Returns true if <paramref name="entityType"/> is declared as entity.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
            <remarks>
            Check the <paramref name="entityType"/> is a descendant of <see cref="T:Xafari.XF.IXFEntity"/> and find attribute <see cref="T:Xafari.XF.NonXFEntityAttribute"/>.
            </remarks>
        </member>
        <member name="M:Xafari.EntityFactory.Init">
            <summary>
            Empty method to ensure Entity factory is inited
            </summary>
        </member>
        <member name="P:Xafari.EntityFactory.Entities">
            <summary>
            Returns registered business entities list.
            </summary>
        </member>
        <member name="M:Xafari.EntityFactory.FindRealEntityType(System.Type)">
            <summary>
            Returns real type for entity type
            </summary>
            <param name="type">Entity type</param>
            <returns>Returns value of <paramref name="type"/> if real type is not exist.</returns>
        </member>
        <member name="M:Xafari.EntityFactory.FindEntityType(System.Type)">
            <summary>
            Returns entity type for real entity type
            </summary>
            <param name="realType">Real entity type</param>
            <returns></returns>
        </member>
        <member name="M:Xafari.EntityFactory.IsEntity(System.Type)">
            <summary>
            Check <paramref name="entityType"/> for business entity.
            </summary>
            <param name="entityType">Check this type for entity.</param>
            <returns><b>true</b> if <paramref name="entityType"/> registered as business entity; <b>false</b> - otherwise.</returns>
        </member>
        <member name="M:Xafari.EntityFactory.IsEntityExtension(System.Type)">
            <summary>
            Checks than <paramref name="entityExtensionType"/> is entity extension type.
            </summary>
            <param name="entityExtensionType"></param>
            <returns></returns>
        </member>
        <member name="M:Xafari.EntityFactory.RegisterExtension(System.Type,System.Type,System.String,System.String,DevExpress.Persistent.Base.ExpandObjectMembers,System.Boolean,System.String,System.Type,System.String)">
            <summary>
            Registers extension <paramref name="extensionType"/> for entity <paramref name="entityType"/>.
            </summary>
            <param name="entityType">Type of entity</param>
            <param name="extensionType">Type of extension</param>
            <param name="propertyName">Specifies property name for extension</param>
            <param name="backPropertyName">Specifies entity back property name</param>
            <param name="expandObjectMembers">Specifies strategy to display extensions on entity detail view. By default, <see cref="F:DevExpress.Persistent.Base.ExpandObjectMembers.Never"/>.</param>
            <param name="autoCreate">Specifies how eextension instance creating. By default, <b>true</b>.</param>
            <param name="nameSpace">Specifies namespace for entity table.</param>
            <param name="baseType">Specifies base type.</param>
            <param name="entityName">Specifies entity table name.</param>
        </member>
        <member name="M:Xafari.EntityFactory.RegisterExtension``2(System.String,System.String,DevExpress.Persistent.Base.ExpandObjectMembers,System.Boolean,System.String,System.Type,System.String)">
            <summary>
            Register extension <typeparamref name="TExtension"/> for entity <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity</typeparam>
            <typeparam name="TExtension">Type of extension</typeparam>
            <param name="propertyName">Specifies property name for extension</param>
            <param name="backPropertyName">Specifies entity back property name</param>
            <param name="expandObjectMembers">Specifies strategy to display extensions on entity detail view. By default, <see cref="F:DevExpress.Persistent.Base.ExpandObjectMembers.Never"/>.</param>
            <param name="autoCreate">Specifies how eextension instance creating. By default, <b>true</b>.</param>
            <param name="nameSpace">Specifies namespace for entity table.</param>
            <param name="entityName">Specifies entity table name.</param>
            <param name="baseType">Specifies base type.</param>
        </member>
        <member name="M:Xafari.EntityFactory.RegisterExtension``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.String,System.String,DevExpress.Persistent.Base.ExpandObjectMembers,System.Boolean,System.String,System.Type,System.String)">
            <summary>
            Register extension <typeparamref name="TExtension"/> for entity <typeparamref name="TEntity"/> and register accessors methods.
            </summary>
            <typeparam name="TEntity">Type of entity</typeparam>
            <typeparam name="TExtension">Type of extension</typeparam>
            <param name="entityAccessor">Expression to access entity object from extension.</param>
            <param name="extensionAccessor">Expression to access extension object from entity.</param>
            <param name="propertyName">Specifies property name for extension</param>
            <param name="backPropertyName">Specifies entity back property name</param>
            <param name="expandObjectMembers">Specifies strategy to display extensions on entity detail view. By default, <see cref="F:DevExpress.Persistent.Base.ExpandObjectMembers.Never"/>.</param>
            <param name="autoCreate">Specifies how eextension instance creating. By default, <b>true</b>.</param>
            <param name="nameSpace">Specifies namespace for entity table.</param>
            <param name="entityName">Specifies entity table name.</param>
            <param name="baseType">Specifies base type.</param>
        </member>
        <member name="M:Xafari.EntityFactory.FindEntityInfo(System.Type)">
            <summary>
            Returns <see cref="T:Xafari.XF.Runtime.EntityInfo"/> object for entity type <paramref name="entityType"/>.
            </summary>
            <param name="entityType">Entity type.</param>
            <returns>Returns <b>null</b> if not found.</returns>
        </member>
        <member name="M:Xafari.EntityFactory.FindEntityExtensionInfo(System.Type)">
            <summary>
            Returns <see cref="T:Xafari.XF.Runtime.EntityExtensionInfo"/> object for entity extension type <paramref name="entityExtensionType"/>.
            </summary>
            <param name="entityExtensionType">Entity type.</param>
            <returns>Returns <b>null</b> if not found.</returns>
        </member>
        <member name="M:Xafari.EntityFactory.RegisterRealEntityType(System.Type,System.Type)">
            <summary>
            Registers real type for entity type.
            </summary>
            <param name="entityType">Entity type.</param>
            <param name="realEntityType">Real entity Type.</param>
        </member>
        <member name="M:Xafari.EntityFactory.GetEntitiesModuleType(DevExpress.ExpressApp.XafApplication)">
            <summary>
            Returns <see cref="T:System.Type"/> derived from <see cref="T:DevExpress.ExpressApp.ModuleBase"/> for generated entities module.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xafari.EntityFactory.CreateEntitiesModule(DevExpress.ExpressApp.XafApplication)">
            <summary>
            Creates <see cref="T:DevExpress.ExpressApp.ModuleBase"/> object for generated entities module.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xafari.EntityFactory.CollectAndRegisterXF(System.Collections.Generic.IEnumerable{DevExpress.ExpressApp.ModuleBase})">
            <summary>
            Collects entitis and extensions from modules and register founded types to <see cref="T:Xafari.EntityFactory"/>.
            </summary>
            <param name="modules"></param>
        </member>
        <member name="M:Xafari.EntityFactory.Reset">
            <summary>
            Clear all registered entities.
            </summary>
        </member>
        <member name="M:Xafari.EntityFactory.RegisterEntity(System.Type,System.String,System.Type,System.String)">
            <summary>
            Registers <paramref name="entityType"/> as entity.
            </summary>
            <param name="entityType">Registers this <paramref name="entityType"/>.</param>
            <param name="nameSpace">Specifies namespace for entity table.</param>
            <param name="baseType">Specifies base type.</param>
            <param name="entityName">Specifies entity table name.</param>
            <returns><see cref="T:Xafari.XF.Runtime.EntityInfo"/> object for registered entity.</returns>
            <exception cref="T:System.ArgumentNullException">Occurs if <paramref name="entityType"/> contains <b>null</b>.</exception>
            <exception cref="T:System.InvalidOperationException">Occurs if <paramref name="entityType"/> is non persistent.</exception>
            <remarks>
            if <paramref name="baseType"/> is <b>null</b> use <see cref="T:Xafari.BC.DC.XafariDCBaseObject"/> as base type for <paramref name="entityType"/> which supported <see cref="T:Xafari.XF.IXFEntity"/>;
            otherwise uses <b>null</b>.
            <para>
            Uses <see cref="M:Xafari.Helpers.ITypesInfoHelper.RegisterEntity(System.Type,System.String,System.Type,System.String)"/> method.
            </para>
            </remarks>
            <seealso cref="M:Xafari.Helpers.ITypesInfoHelper.RegisterEntity(System.Type,System.String,System.Type,System.String)"/>
        </member>
        <member name="M:Xafari.EntityFactory.RegisterEntity``1(System.String,System.Type,System.String)">
            <summary>
            Registers <typeparamref name="TEntity"/> as entity.
            </summary>
            <param name="nameSpace">Specifies namespace for entity table.</param>
            <param name="entityName">Specifies entity table name.</param>
            <param name="baseType">Specifies base type.</param>
            <remarks>
            <para>
            Uses <see cref="M:Xafari.Helpers.ITypesInfoHelper.RegisterEntity(System.Type,System.String,System.Type,System.String)"/> method.
            </para>
            </remarks>
            <seealso cref="M:Xafari.Helpers.ITypesInfoHelper.RegisterEntity(System.Type,System.String,System.Type,System.String)"/>
        </member>
        <member name="M:Xafari.EntityFactory.RegisterEntity``2(System.String,System.String)">
            <summary>
            Registers <typeparamref name="TEntity"/> as business entity with <typeparamref name="TBaseType"/> as base type.
            </summary>
            <param name="nameSpace">Specifies namespace for entity table.</param>
            <param name="entityName">Specifies entity table name.</param>
            <remarks>
            <para>
            Uses <see cref="M:Xafari.Helpers.ITypesInfoHelper.RegisterEntity(System.Type,System.String,System.Type,System.String)"/> method.
            </para>
            </remarks>
            <seealso cref="M:Xafari.Helpers.ITypesInfoHelper.RegisterEntity(System.Type,System.String,System.Type,System.String)"/>
        </member>
        <member name="T:Xafari.EntityFactoryExtensions">
            <summary>
            Provides extension methods to operate with entities.
            </summary>
            <summary>
            Provides extension methods to operate with entities.
            </summary>
        </member>
        <member name="M:Xafari.EntityFactoryExtensions.GetExtension``1(Xafari.XF.IXFEntity,System.Boolean)">
            <summary>
            Returns extension <typeparamref name="TExtension"/> for entity <param name="obj"></param>
            </summary>
            <typeparam name="TExtension">Type of extension</typeparam>
            <param name="obj">Entity instance</param>
            <param name="createIfEmpty">Specifies flag for create extension instance if empty.</param>
            <returns></returns>
            <remarks>
            If extension instance is <b>null</b> creates new extension instance if <paramref name="createIfEmpty"/> contains <b>true</b>.
            </remarks>
        </member>
        <member name="M:Xafari.EntityFactoryExtensions.GetExtension``1(Xafari.XF.IXFEntity,System.String)">
            <summary>
            Returns extension <typeparamref name="TExtension"/> for entity <paramref name="obj"/> by extension <paramref name="propertyName"/>.
            </summary>
            <typeparam name="TExtension">Type of extension</typeparam>
            <param name="obj">Entity instance</param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Xafari.EntityFactoryExtensions.GetEntity``1(Xafari.XF.IXFEntityExtension)">
            <summary>
            Returns entity <typeparamref name="TEntity"/> for extension instance <paramref name="extension"/>.
            </summary>
            <typeparam name="TEntity">Type of entity</typeparam>
            <param name="extension">Extension instance</param>
            <returns></returns>
        </member>
        <member name="M:Xafari.EntityFactoryExtensions.EntityInfo(System.Type)">
            <summary>
            Returns <see cref="M:Xafari.EntityFactoryExtensions.EntityInfo(System.Type)"/> object for entity type <paramref name="entityType"/>.
            </summary>
            <param name="entityType">Entity type.</param>
            <returns></returns>
        </member>
        <member name="M:Xafari.EntityFactoryExtensions.RegisterEntity(System.Type)">
            <summary>
            Registers <paramref name="entityType"/> as business entity.
            </summary>
            <param name="entityType">Registers this <paramref name="entityType"/>.</param>
            <returns><see cref="M:Xafari.EntityFactoryExtensions.EntityInfo(System.Type)"/> object for registered entity.</returns>
            <remarks>
            Uses <see cref="F:Xafari.EntityFactory.Instance"/> to implement method.
            </remarks>
        </member>
        <member name="M:Xafari.EntityFactoryExtensions.RegisterRealEntityType(System.Type,System.Type)">
            <summary>
            Registers <paramref name="realEntityType"/> for <paramref name="entityType"/>.
            </summary>
            <param name="entityType">Entity type.</param>
            <param name="realEntityType">Real entity Type.</param>
        </member>
        <member name="M:Xafari.EntityFactoryExtensions.FindRealEntityType(System.Type)">
            <summary>
            Returns real type for entity type
            </summary>
            <param name="type">Entity type</param>
            <returns>Returns value of <paramref name="type"/> if real type is not exist.</returns>
        </member>
        <member name="M:Xafari.EntityFactoryExtensions.FindEntityType(System.Type)">
            <summary>
            Returns <see cref="T:System.Type"/> of entity by the specified <paramref name="realType"/>.
            </summary>
            <param name="realType"></param>
            <returns></returns>
        </member>
        <member name="M:Xafari.EntityFactoryExtensions.IsEntity(System.Type)">
            <summary>
            Checks than <paramref name="entityType"/> is entity.
            </summary>
            <param name="entityType"></param>
            <returns><b>true</b> is <paramref name="entityType"/> registered as entity.</returns>
        </member>
        <member name="M:Xafari.EntityFactoryExtensions.IsEntityExtension(System.Type)">
            <summary>
            Checks than <paramref name="entityExtensionType"/> is entity extension.
            </summary>
            <param name="entityExtensionType"></param>
            <returns><b>true</b> is <paramref name="entityExtensionType"/> registered as entity extension.</returns>
        </member>
        <member name="M:Xafari.EntityFactoryExtensions.EntityExtensionInfo(System.Type)">
            <summary>
            Returns an <see cref="M:Xafari.EntityFactoryExtensions.EntityExtensionInfo(System.Type)"/> object for specified <paramref name="entityExtensionType"/>.
            </summary>
            <param name="entityExtensionType"></param>
            <returns></returns>
        </member>
        <member name="M:Xafari.EntityFactoryExtensions.FindEntityTypeInfo(DevExpress.ExpressApp.DC.ITypesInfo,System.Type)">
            <summary>
            Returns <see cref="T:DevExpress.ExpressApp.DC.ITypeInfo"/> for entity by the specified <paramref name="realType"/>.
            </summary>
            <param name="typesInfo"></param>
            <param name="realType"></param>
            <returns></returns>
        </member>
        <member name="M:Xafari.EntityFactoryExtensions.Query``1(DevExpress.ExpressApp.IObjectSpace)">
            <summary>
            Creates and returns new instance of <see cref="T:Xafari.XF.XFQuery`1"/>.
            </summary>
            <typeparam name="TEntity">Type of entity</typeparam>
            <param name="objectSpace"></param>
            <returns></returns>
        </member>
    </members>
</doc>
