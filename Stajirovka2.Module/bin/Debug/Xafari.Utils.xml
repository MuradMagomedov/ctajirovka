<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xafari.Utils</name>
    </assembly>
    <members>
        <member name="F:ProductInfo.IdentityVersion">
            <summary>
            This version used in code to identity product
            </summary>
        </member>
        <member name="T:Xafari.Utils.ActiveScope">
            <summary>
            Defines scope for temporary modify <see cref="P:Xafari.Utils.ActiveScope.BoolList"/> state.
            Used with <i>using()</i> operator.
            </summary>
            <remarks>
            <example>
            This sample show how to temparary deactivate any <see cref="T:DevExpress.ExpressApp.Controller"/>.
            <code>
            Controller anyController;
            using (new ActiveScope(anyController.Active, false))
            {
            	// any code
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="T:Xafari.Utils.ValueScope`1">
            <summary>
            Service class to modify any value inside the using() scope and automatic restore previous value on exit from scope.
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Xafari.Utils.ValueScope`1.#ctor(`0)">
            <summary>
            Use this constructor when ovveride <see cref="M:Xafari.Utils.ValueScope`1.SetValue(`0)"/> and <see cref="M:Xafari.Utils.ValueScope`1.GetValue"/> methods.
            Mandatory call <see cref="M:Xafari.Utils.ValueScope`1.Initialize(`0)"/> method in derived constructor.
            </summary>
            <param name="newValue"></param>
            <remarks>
            </remarks>
        </member>
        <member name="M:Xafari.Utils.ValueScope`1.Initialize(`0)">
            <summary>
            Initialize instance. 
            Mandatory call this method in derived constructor.
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="T:Xafari.Utils.Data.Environment">
            <summary>
            Execution environment. 
            This class contains the current batch execution environment:
             - variable values
             - SQL connection
             - results
            </summary>
        </member>
        <member name="P:Xafari.Utils.Data.Environment.Variables">
            <summary>
            Execution variable values
            </summary>
        </member>
        <member name="P:Xafari.Utils.Data.Environment.Connection">
            <summary>
            The SqlConnection used to execute the SQL batches.
            </summary>
        </member>
        <member name="T:Xafari.Utils.Data.SqlCmd">
            <summary>
            Class for sqlcmd functionality
            </summary>
        </member>
        <member name="M:Xafari.Utils.Data.SqlCmd.#ctor(System.Data.IDbConnection)">
            <summary>
            Constructor
            </summary>
            <param name="conn">The SQL Connection used to execute the SQL batches</param>
        </member>
        <member name="P:Xafari.Utils.Data.SqlCmd.Environment">
            <summary>
            Execution Environment 
            </summary>
        </member>
        <member name="P:Xafari.Utils.Data.SqlCmd.BatchDelimiter">
            <summary>
            The batch delimiter.
            </summary>
        </member>
        <member name="P:Xafari.Utils.Data.SqlCmd.ContinueOnError">
            <summary>
            Determines if to continue or break in case of SQL error.
            Can be controlled from the SQL file by using `:on error [exit:ignore]`
            </summary>
        </member>
        <member name="M:Xafari.Utils.Data.SqlCmd.ExecuteFile(System.String)">
            <summary>
            Executes a SQL file
            </summary>
            <param name="fileContent">The SQL file content</param>
        </member>
        <member name="T:Xafari.Utils.Data.SqlCmdExecutingEventArgs">
            <summary>
            This class is the arguments passed to the SqlCmd.Executing event
            </summary>
        </member>
        <member name="P:Xafari.Utils.Data.SqlCmdExecutingEventArgs.Environment">
            <summary>
            Environment of the SqlCmd that is executing the batch
            </summary>
        </member>
        <member name="P:Xafari.Utils.Data.SqlCmdExecutingEventArgs.Batch">
            <summary>
            Batch being executing
            </summary>
        </member>
        <member name="T:Xafari.Utils.Data.SqlCmdException">
            <summary>
            This is the exception class raised by the SqlCmd funcitonality
            </summary>
        </member>
        <member name="T:Xafari.Utils.DisposableExtBase">
            <summary>
            Base class to implement <see cref="T:Xafari.Utils.IDisposableExt2"/>.
            </summary>
        </member>
        <member name="T:Xafari.Utils.IDisposableExt2Members">
            <summary>
            Enums <see cref="T:Xafari.Utils.IDisposableExt2"/> members.
            Used by <see cref="T:Xafari.Utils.IDisposableExt2Facade"/>.
            </summary>
        </member>
        <member name="F:Xafari.Utils.IDisposableExt2Members.EventDisposing">
            <summary>
            Corresponds to <see cref="E:Xafari.Utils.IDisposableExt2.Disposing"/>.
            </summary>
        </member>
        <member name="F:Xafari.Utils.IDisposableExt2Members.EventDisposed">
            <summary>
            Corresponds to <see cref="E:Xafari.Utils.IDisposableExt2.Disposed"/>.
            </summary>
        </member>
        <member name="F:Xafari.Utils.IDisposableExt2Members.PropertyIsDisposed">
            <summary>
            Corresponds to <see cref="!:IDisposableExt2.IsDisposed"/>.
            </summary>
        </member>
        <member name="T:Xafari.Utils.IDisposableExt2Facade">
            <summary>
            Facade class to implement <see cref="T:Xafari.Utils.IDisposableExt2"/>. 
            </summary>
            <remarks>
            For example, <see cref="T:DevExpress.ExpressApp.XafApplication"/> or <see cref="T:DevExpress.ExpressApp.View"/> has members IsDisposed, Disposed, Disposing,
            but don't implement <see cref="T:Xafari.Utils.IDisposableExt2"/>. Any of these members are non-public.
            Facade help to operate these members like members of interface <see cref="T:Xafari.Utils.IDisposableExt2"/>.
            </remarks>
        </member>
        <member name="M:Xafari.Utils.IDisposableExt2Facade.#ctor(System.IDisposable)">
            <summary>
            Creates an instance of <see cref="T:Xafari.Utils.IDisposableExt2"/>.
            </summary>
            <param name="target">This object will be cast to <see cref="T:Xafari.Utils.IDisposableExt2"/>.</param>
        </member>
        <member name="M:Xafari.Utils.IDisposableExt2Facade.IsSupport(Xafari.Utils.IDisposableExt2Members)">
            <summary>
            Checks the target object to support the specified <see cref="!:member"/>.
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.IDisposableExt2Facade.TryGet(System.IDisposable,Xafari.Utils.IDisposableExt2Members)">
            <summary>
            Try to create <see cref="T:Xafari.Utils.IDisposableExt2Facade"/> for specified <paramref name="target"/> with requested members <paramref name="required"/>.
            </summary>
            <param name="target"></param>
            <param name="required">Contains required members of <see cref="T:Xafari.Utils.IDisposableExt2"/> list.</param>
            <returns>
            Returns <b>null</b> if <see cref="T:Xafari.Utils.IDisposableExt2"/> not supported.
            </returns>
        </member>
        <member name="M:Xafari.Utils.IDisposableExt2Facade.TryGetPropertyIsDisposed">
            <summary>
            Try to find member to implement <see cref="!:IDisposableExt2.IsDisposed"/> property.
            </summary>
            <returns></returns>
            <remarks>
            First, find public or nonpublic case-sensitive 'IsDisposed' <see cref="T:System.Boolean"/> property.
            Than, find public or nonpublic case-insensitive 'isDisposed' or '_isDisposed' <see cref="T:System.Boolean"/> field.
            </remarks>
        </member>
        <member name="M:Xafari.Utils.IDisposableExt2Facade.TryGetEventDisposed">
            <summary>
            Try to find member to implement <see cref="E:Xafari.Utils.IDisposableExt2.Disposed"/> event.
            </summary>
            <returns></returns>
            <remarks>
            First, find public case-sensitive 'Disposed' <see cref="T:System.EventHandler"/> event.
            Than, find public or nonpublic case-insensitive 'Disposed' or '_disposed' <see cref="T:System.EventHandler"/> field.
            </remarks>
        </member>
        <member name="M:Xafari.Utils.IDisposableExt2Facade.TryGetEventDisposing">
            <summary>
            Try to find member to implement <see cref="E:Xafari.Utils.IDisposableExt2.Disposing"/> event.
            </summary>
            <returns></returns>
            <remarks>
            First, find public case-sensitive 'Disposing' <see cref="T:System.EventHandler"/> event.
            Than, find public or nonpublic case-insensitive 'Disposing' or '_disposing' <see cref="T:System.ComponentModel.CancelEventHandler"/> field.
            </remarks>
        </member>
        <member name="T:Xafari.Utils.EvalCustomFunction">
            <summary>
            Custom function to evaluate specified expression.
            </summary>
        </member>
        <member name="M:Xafari.Utils.EvalCustomFunction.Register">
            <summary>
            Register custom function.
            Must be called just from static constructors.
            </summary>
        </member>
        <member name="T:Xafari.Utils.ExpressionCalculator">
            <summary>
            Get value by expression.
            </summary>
        </member>
        <member name="F:Xafari.Utils.ExpressionCalculator.ThrowExceptionsDefaultValue">
            <summary>
            Default value for throwExceptions parameters.
            By default, <b>false</b>.
            </summary>
        </member>
        <member name="M:Xafari.Utils.ExpressionCalculator.TryGetStringValue(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Func{System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object},System.Object@)">
            <summary>
            Calculate string value from expression by format '${expression1} {expression2}' and so on.
            </summary>
            <param name="expression"></param>
            <param name="getValueFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.ExpressionCalculator.GetValue(System.String,System.Object,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object},DevExpress.ExpressApp.IObjectSpace)">
            <summary>
            Calculate value of expression without context by using named parameters.
            </summary>
            <param name="expression">Expression.</param>
            <param name="context">Context.</param>
            <param name="parameters">Named parameters for expression calculation.</param>
            <param name="objectSpace">Allow to use objectspace to parse persisntent objects.</param>
            <returns>Calculated value.</returns>
        </member>
        <member name="M:Xafari.Utils.ExpressionCalculator.GetValue(System.String,System.Object,System.Boolean,System.Object,DevExpress.ExpressApp.IObjectSpace)">
            <summary>
            Calculate value of expression with context object by using dynamic type as named parameters.
            </summary>
            <param name="expression">Expression.</param>
            <param name="context">Context.</param>
            <param name="parameters">Dynamic type as named parameters for expression calculation.</param>
            <param name="objectSpace">Allow to use objectspace to parse persisntent objects.</param>
            <returns>Calculated value.</returns>
        </member>
        <member name="M:Xafari.Utils.ExpressionCalculator.GetValue(System.String,System.Object,System.Object[])">
            <summary>
            Calculate value of expression with context object by using '?' as parameters.
            </summary>
            <param name="expression">Expression.</param>
            <param name="context">Context.</param>
            <param name="parameters">Unnamed parameters for expression calculation.</param>
            <returns>Calculated value.</returns>
        </member>
        <member name="M:Xafari.Utils.ExpressionCalculator.GetValue(System.String,System.Object,System.Boolean,System.Object[])">
            <summary>
            Calculate value of expression with context object by using '?' as parameters.
            </summary>
            <param name="expression">Expression.</param>
            <param name="context">Context.</param>
            <param name="parameters">Unnamed parameters for expression calculation.</param>
            <returns>Calculated value.</returns>
        </member>
        <member name="M:Xafari.Utils.ExpressionCalculator.ParseCriteria(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},DevExpress.ExpressApp.IObjectSpace)">
            <summary>
            Calculate CriteriaOperator of expression with context object.
            </summary>
            <param name="expression">Expression.</param>
            <param name="parameters">Parameters for expression calculation.</param>
            <param name="objectSpace">Allow to use objectspace to parse persisntent objects.</param>
            <returns>CriteriaOperator equivalent.</returns>
        </member>
        <member name="M:Xafari.Utils.Extensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Xafari.Utils.IComparerExt{``0})">
            <summary>
            Returns ordered list by using specified <paramref name="comparer"/> to compare objects.
            </summary>
            <param name="source">Unsorted list.</param>
            <param name="comparer">Object which implements <see cref="T:Xafari.Utils.IComparerExt`1"/> interface.</param>
            <returns>Sorted <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Xafari.Utils.Extensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Nullable{System.Int32}})">
            <summary>
            Returns ordered list by using specified <paramref name="compare"/> method.
            </summary>
            <param name="source">Unsorted list.</param>
            <param name="comparer">Object which implements <see cref="T:Xafari.Utils.IComparerExt`1"/> interface.</param>
            <returns>Sorted <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Xafari.Utils.Extensions.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},Xafari.Utils.IComparerExt{``1})">
            <summary>
            Returns sorted list of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="getKey"><see cref="T:System.Func`2"/> for calculate key object from <typeparamref name="T"/>.</param>
             <param name="comparer">Object which implements <see cref="T:Xafari.Utils.IComparerExt`1"/> interface.</param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.Extensions.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,``1,System.Nullable{System.Int32}})">
             <summary>
             Returns sorted list of <typeparamref name="T"/>.
             </summary>
             <typeparam name="T">Any type, where key can be calculated with <paramref name="getKey"/>.</typeparam>
            <typeparam name="TKey">Type of key</typeparam>
            <param name="source">Unsorted list.</param>
             <param name="compare">Method to comapare to objects.</param>
             <param name="getKey"><see cref="T:System.Func`2"/> for calculate key object from <typeparamref name="T"/>.</param>
             <returns>Sorted <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
             <example>
             <code>
             class Example
             {
            		//In this context MyMemberTypeInfo - class which contains property "System.Type MemberType"
            		void ExampleMethod(IEnumerable&lt;MyMemberTypeInfo&gt; list)
            		{
            			list.OrderBy&lt;IMemberInfo&gt;(x => x.MemberType, Xafari.Utils.TypeComparerExt.Compare)
             }
             </code>
             </example>
        </member>
        <member name="M:Xafari.Utils.Extensions.OrderByDescending``1(System.Collections.Generic.IEnumerable{``0},Xafari.Utils.IComparerExt{``0})">
            <summary>
            Returns ordered by descending list by using <paramref name="comparer"/> to compare objects.
            </summary>
            <param name="source">Unsorted list.</param>
            <param name="comparer">Object which implements <see cref="T:Xafari.Utils.IComparerExt`1"/> interface.</param>
            <returns>Sorted <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Xafari.Utils.Extensions.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,``1,System.Nullable{System.Int32}})">
            <summary>
            Returns ordered by descending list by using <paramref name="compare"/> method.
            </summary>
            <param name="getKey"><see cref="T:System.Func`2"/> for calculate key object from <typeparamref name="T"/>.</param>
            <param name="compare">Method to comapare to objects.</param>
        </member>
        <member name="M:Xafari.Utils.Extensions.ToBoolean(System.String,System.Boolean)">
            <summary>
            Try to converts string to boolean value. Process 'true', 'false', '0', '1', 'yes', 'no' values.
            </summary>
            <param name="source"></param>
            <param name="defaultValue"></param>
            <returns>Returns <paramref name="defaultValue"/> if can't to parse string.</returns>
        </member>
        <member name="M:Xafari.Utils.Extensions.AssignConsole``1(``0,Xafari.Utils.IConsole)">
            <summary>
            Assigns target object <paramref name="console"/> by values from <paramref name="source"/>.
            Uses <see cref="F:Xafari.Utils.DefaultConsole.Instance"/> if <paramref name="source"/> is null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="console"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.Extensions.GetPassword(Xafari.Utils.IConsoleExt)">
            <summary>
            Reads password as <see cref="T:System.Security.SecureString"/> from <paramref name="console"/>.
            </summary>
            <param name="console"></param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.Extensions.FindField(System.Type,System.String,System.Reflection.BindingFlags,System.Predicate{System.Reflection.FieldInfo})">
            <summary>
            Allow to find field with specified name in selected type and its base types.
            </summary>
            <param name="type">Current type.</param>
            <param name="fieldName">Searching field name.</param>
            <param name="bindingAttr">Binding attributes.</param>
            <param name="predicate">Allow to customize criteria for searching.</param>
            <returns><see cref="T:System.Reflection.FieldInfo"/> of searching field.</returns>
        </member>
        <member name="M:Xafari.Utils.Extensions.FindProperty(System.Type,System.String,System.Reflection.BindingFlags,System.Predicate{System.Reflection.PropertyInfo})">
            <summary>
            Allow to find property with specified name in selected type and its base types.
            </summary>
            <param name="type">Current type.</param>
            <param name="propertyName">Searching property name.</param>
            <param name="bindingAttr">Binding attributes.</param>
            <param name="predicate">Allow to customize criteria for searching.</param>
            <returns><see cref="T:System.Reflection.PropertyInfo"/> of searching property.</returns>
        </member>
        <member name="M:Xafari.Utils.Extensions.ToNameValueDictionary(System.Object)">
            <summary>
            Creates name/value dictionary for all public properties.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="P:Xafari.Utils.IConsole.Out">
            <summary>
            Designed to output the results of the work command.
            </summary>
            <remarks>
            It may be not initialized.
            </remarks>
        </member>
        <member name="P:Xafari.Utils.IConsoleExt.Error">
            <summary>
            Used to display information about errors. May be uninitialized.
            </summary>
        </member>
        <member name="P:Xafari.Utils.IConsoleExt.In">
            <summary>
            Used for entering data. May be uninitialized.
            </summary>
        </member>
        <member name="T:Xafari.Utils.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Xafari.Utils.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Xafari.Utils.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Xafari.Utils.Resources.CONNECTSYNTAXEXCEPTIONFORMAT">
            <summary>
              Looks up a localized string similar to The :connect command &apos;{0}&apos; contains an invalid data source.
            </summary>
        </member>
        <member name="P:Xafari.Utils.Resources.SETVARSYNTAXEXCEPTIONFORMAT">
            <summary>
              Looks up a localized string similar to The :setvar command &apos;{0}&apos; contains an invalid variable definition.
            </summary>
        </member>
        <member name="P:Xafari.Utils.Resources.SHELLSYNTAXEXCEPTIONFORMAT">
            <summary>
              Looks up a localized string similar to The :!! command &apos;{0}&apos; contains an invalid command.
            </summary>
        </member>
        <member name="T:Xafari.Utils.AlwaysNullToStringConverter">
            <summary>
            Always convert any object to null string.
            Always convert from any string to null.
            </summary>
        </member>
        <member name="T:Xafari.Utils.DatabaseHelper">
            <summary>
            Вспомогательные методы работы с базой данных.
            </summary>
        </member>
        <member name="M:Xafari.Utils.DatabaseHelper.IsDatabaseCompatible(DevExpress.ExpressApp.XafApplication)">
            <summary>
            Проверка базы данных на совместимость с текущим приложением и версиями загруженных модулей.
            </summary>
            <param name="application">Ссылка на экземпляр приложения</param>
            <returns>Возвращает True, если проверка на совместимость успешно пройдена.</returns>
        </member>
        <member name="M:Xafari.Utils.ObjectSpaceExtensions.SafeCode(DevExpress.ExpressApp.IObjectSpace,System.UInt32,System.Action,System.Action)">
            <summary>
            Относительно безопасная работа с ObjectSpace'ом.
            Добавлено для работы сервиса нумераторов без глобального ObjectSpace.
            </summary>
            <param name="objectSpace">локальный os</param>
            <param name="maxCount">количество попыток до отката к прежнему состоянию</param>
            <param name="action">что пытаемся сделать</param>
            <param name="rollbackAction">откат в случае превышения лимита попыток</param>
        </member>
        <member name="M:Xafari.Utils.ObjectSpaceExtensions.SafeCode(DevExpress.ExpressApp.IObjectSpace,System.UInt32,System.Action,System.Object[])">
            <summary>
            Относительно безопасная работа с ObjectSpace'ом.
            Добавлено для работы сервиса нумераторов без глобального ObjectSpace.
            </summary>
            <param name="objectSpace">локальный os</param>
            <param name="maxCount">количество попыток до отката к прежнему состоянию</param>
            <param name="action">что пытаемся сделать</param>
            <param name="objectsToReload">reload'им эти объекты в случае превышения лимита попыток</param>
        </member>
        <member name="M:Xafari.Utils.PersistentConvertHelper.GetXPObjectsId(System.Object[])">
            <summary>
            Converts persistent objects to string.
            </summary>
            <param name="persistentObjects"> </param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.PersistentConvertHelper.GetXPObjectId(DevExpress.Xpo.IXPSimpleObject)">
            <summary>
            Converts persistent object to string.
            </summary>
            <param name="thisObject"> </param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.PersistentConvertHelper.GetXPObjectsCollectionId(System.Collections.IEnumerable)">
            <summary>
            Converts persistent objects collection to string.
            </summary>
            <param name="persistentObjectsCollection"> </param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.PersistentConvertHelper.GetXPObjectsById(System.String,DevExpress.ExpressApp.IObjectSpace)">
            <summary>
            Convert string to persistent object
            </summary>
            <param name="stringObjects"></param>
            <param name="objectSpace"></param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.RecursiveExtensions.Recursive``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``1,``0,System.Boolean},System.Func{``1,``0,``1},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Recursive processing of hierarchical data with method to check node for proccessing.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <typeparam name="TContext">Context type</typeparam>
            <param name="context">Context object as processing node result</param>
            <param name="list">Root node list</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="checkNodePredicate">Invokes for every item before main action invoking. Processing node continue if result <b>true</b>.</param>
            <param name="action">Action to process node. Return new context for processing child items.</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
            <remarks>
            Checks returned values of <paramref name="checkNodePredicate"/> 
            and process nodes by <paramref name="action"/> if <b>true</b>.
            </remarks>
        </member>
        <member name="M:Xafari.Utils.RecursiveExtensions.Recursive``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},System.Boolean},System.Func{``1,``0,System.Boolean},System.Func{``1,``0,``1},System.Action{``1,``0},System.Action{``1,System.Collections.Generic.IEnumerable{``0}},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Recursive processing of hierarchical data.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <typeparam name="TContext">Context type</typeparam>
            <param name="context">Context object as processing node result</param>
            <param name="list">Root node list</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="beforeListFunc">Invokes before processing list of items. Processing list continue if result <b>true</b>.</param>
            <param name="beforeFunc">Invokes for every item before main action invoking. Processing node continue if result <b>true</b>.</param>
            <param name="action">Action to process node. Return new context for processing child items.</param>
            <param name="afterAction">Invokes for every item after main action invoking and processing children items</param>
            <param name="afterListAction">Invokes after processing list of items</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
            <remarks>
            Checks returned values of <paramref name="beforeListFunc"/> and <paramref name="beforeFunc"/> 
            and process nodes by <paramref name="action"/> if <b>true</b>.
            Use <paramref name="beforeListFunc"/> and <paramref name="beforeFunc"/> if needs to skip some nodes.
            </remarks>
        </member>
        <member name="M:Xafari.Utils.RecursiveExtensions.Recursive``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,System.Collections.Generic.IEnumerable{``0}},System.Action{``1,System.Collections.Generic.IEnumerable{``0}},System.Action{``1,``0},System.Func{``1,``0,``1},System.Action{``1,``0},System.Action{``1,System.Collections.Generic.IEnumerable{``0}},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Recursive processing of hierarchical data.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <typeparam name="TContext">Context type</typeparam>
            <param name="context">Context object as processing node result</param>
            <param name="list">Root node list</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="beforeListAction">Invokes before processing list of items.</param>
            <param name="beforeAction">Invokes for every item before main action invoking.</param>
            <param name="action">Action to process node. Return new context for processing child items.</param>
            <param name="afterAction">Invokes for every item after main action invoking and processing children items</param>
            <param name="afterListAction">Invokes after processing list of items</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
            <remarks>
            Use <see cref="!:Recursive&lt;TItem,TContext&gt;(System.Linq.IEnumerable&lt;TItem&gt;,TContext,System.Func&lt;TContext,TItem,System.Linq.IEnumerable&lt;TItem&gt;&gt;,System.Func&lt;TContext,TItem,bool&gt;,System.Func&lt;TContext,TItem,TContext&gt;,Xafari.Utils.RecursiveHelper.CycleExeptionMode)"/> if needs to skip some nodes.
            </remarks>
        </member>
        <member name="M:Xafari.Utils.RecursiveExtensions.Recursive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Action{System.Collections.Generic.IEnumerable{``0}},System.Action{``0},System.Action{``0},System.Action{``0},System.Action{System.Collections.Generic.IEnumerable{``0}},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Recursive processing of hierarchical data.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <param name="list">Root node list</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="beforeAction">Invokes for every item before main action invoking</param>
            <param name="action">Action to process node. Return new context for processing child items.</param>
            <param name="beforeListAction">Invokes before processing list of items</param>
            <param name="afterAction">Invokes for every item after main action invoking and processing children items</param>
            <param name="afterListAction">Invokes after processing list of items</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
        </member>
        <member name="M:Xafari.Utils.RecursiveExtensions.Recursive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{System.Collections.Generic.IEnumerable{``0},System.Boolean},System.Func{``0,System.Boolean},System.Action{``0},System.Action{``0},System.Action{System.Collections.Generic.IEnumerable{``0}},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Recursive processing of hierarchical data.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <param name="list">Root node list</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="beforeListFunc">Invokes before processing list of items. Processing list continue if result <b>true</b>.</param>
            <param name="beforeFunc">Invokes for every item before main action invoking. Processing list continue if result <b>true</b>.</param>
            <param name="action">Action to process node. Return new context for processing child items.</param>
            <param name="afterAction">Invokes for every item after main action invoking and processing children items</param>
            <param name="afterListAction">Invokes after processing list of items</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
            <remarks>
            Checks returned values of <paramref name="beforeListFunc"/> and <paramref name="beforeFunc"/> 
            and process nodes by <paramref name="action"/> if <b>true</b>.
            Use <paramref name="beforeListFunc"/> and <paramref name="beforeFunc"/> if needs to skip some nodes.
            </remarks>
        </member>
        <member name="M:Xafari.Utils.RecursiveExtensions.Recursive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean},System.Action{``0},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Recursive processing of hierarchical data.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <param name="list">Root node list</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="checkNodePredicate">Invokes for every item before main action invoking. Processing list continue if result <b>true</b>.</param>
            <param name="action">Action to process node. Return new context for processing child items.</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
            <remarks>
            Checks returned values of <paramref name="checkNodePredicate"/> 
            and process nodes by <paramref name="action"/> if <b>true</b>.
            </remarks>
        </member>
        <member name="M:Xafari.Utils.RecursiveExtensions.Recursive``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``1,``0,``1},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Recursive processing of hierarchical data.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <typeparam name="TContext">Context type</typeparam>
            <param name="context">Context object as processing node result</param>
            <param name="list">Root node list</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="action">Action to process node. Return new context for processing child items.</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
        </member>
        <member name="M:Xafari.Utils.RecursiveExtensions.Recursive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Action{``0},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Recursive processing of hierarchical data.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <param name="list">Root node list</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="action">Action to process node. Return new context for processing child items.</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
        </member>
        <member name="M:Xafari.Utils.RecursiveExtensions.Recursive``2(``0,``1,System.Func{``1,``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``1,``0,``1},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Recursive processing of hierarchical data.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <typeparam name="TContext">Context type</typeparam>
            <param name="context">Context object as processing node result</param>
            <param name="root">Root object</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="action">Action to process node. Return new context for processing child items.</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
        </member>
        <member name="M:Xafari.Utils.RecursiveExtensions.Recursive``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Action{``0},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Recursive processing of hierarchical data.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <param name="root">Root object</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="action">Action to process node. Return new context for processing child items.</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
        </member>
        <member name="M:Xafari.Utils.RecursiveExtensions.Recursive``1(System.Collections.Generic.IEnumerable{DevExpress.Persistent.Base.General.ITreeNode},``0,System.Func{``0,DevExpress.Persistent.Base.General.ITreeNode,``0},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Recursive processing of <see cref="T:DevExpress.Persistent.Base.General.ITreeNode"/> data.
            </summary>
            <typeparam name="TContext">Context type</typeparam>
            <param name="context">Context object as processing node result</param>
            <param name="list">Root node list</param>
            <param name="action">Action to process node. Return new context for processing child items.</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
        </member>
        <member name="M:Xafari.Utils.RecursiveExtensions.Recursive(System.Collections.Generic.IEnumerable{DevExpress.Persistent.Base.General.ITreeNode},System.Action{DevExpress.Persistent.Base.General.ITreeNode},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Recursive processing of <see cref="T:DevExpress.Persistent.Base.General.ITreeNode"/> data.
            </summary>
            <param name="list">Root node list</param>
            <param name="action">Action to process node. Return new context for processing child items.</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
        </member>
        <member name="M:Xafari.Utils.RecursiveExtensions.RecursiveFind``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Find item by predicate by items list.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <param name="list">Root node list</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="predicate">Function to compare node with path item</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.RecursiveExtensions.RecursiveFind``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Find item by predicate by items list.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <param name="root">Root node</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="predicate">Function to compare node with path item</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.RecursiveExtensions.FindByPath``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1,System.Boolean},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Find item by path represented by items list.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <typeparam name="TPathItem">Path item type</typeparam>
            <param name="path">Path to node</param>
            <param name="list">Root node list</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="predicate">Function to compare node with path item</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.RecursiveExtensions.FindByPath``2(``0,System.Collections.Generic.IEnumerable{``1},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1,System.Boolean},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Find item by path represented by items list.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <typeparam name="TPathItem">Path item type</typeparam>
            <param name="path">Path to node</param>
            <param name="root">Root node</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="predicate">Function to compare node with path item</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.RecursiveExtensions.FindByPath``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.String,System.Boolean},System.Char[],Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Find item by path.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <param name="pathStr">Path to node</param>
            <param name="list">Root node list</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="predicate">Function to compare node with path item</param>
            <param name="delimeters">Specifies delimeters chars. By default uses '/' and '\'.</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.RecursiveExtensions.FindByPath``1(``0,System.String,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.String,System.Boolean},System.Char[],Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Find item by path represented by items list.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <param name="pathStr">Path to node</param>
            <param name="root">Root node</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="predicate">Function to compare node with path item</param>
            <param name="delimeters">Specifies delimeters chars. By default uses '/' and '\'.</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.RecursiveExtensions.FindByPath(DevExpress.Persistent.Base.General.ITreeNode,System.String,System.Char[],Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Find <see cref="T:DevExpress.Persistent.Base.General.ITreeNode"/> by path.
            </summary>
            <param name="pathStr">Path to node</param>
            <param name="root">Root node</param>
            <param name="delimeters">Specifies delimeters chars. By default uses '/' and '\'.</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.RecursiveExtensions.ToList``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Convert from hierarchical data to list.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <param name="list">Root node list</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.RecursiveExtensions.ToList``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Convert from hierarchical data to list.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <param name="list">Root node list</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="predicate">Function to compare node with path item</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.RecursiveExtensions.ToList``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Convert from hierarchical data to list.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <param name="root">Root node</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.RecursiveHelper.Recursive``2(``1,System.Collections.Generic.IEnumerable{``0},System.Func{``1,``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},System.Boolean},System.Func{``1,``0,System.Boolean},System.Func{``1,``0,``1},System.Action{``1,``0},System.Action{``1,System.Collections.Generic.IEnumerable{``0}},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Recursive processing of hierarchical data.
            </summary>
            <typeparam name="TItem">Node type</typeparam> 
            <typeparam name="TContext">Context type</typeparam>
            <param name="context">Context object as processing node result</param>
            <param name="list">Root node list</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="beforeListFunc">Invokes before processing list of items. Processing list continue if result <b>true</b>.</param>
            <param name="beforeFunc">Invokes for every item before main action invoking. Processing node continue if result <b>true</b>.</param>
            <param name="action">Action to process node. Return new context for processing child items.</param>
            <param name="afterAction">Invokes for every item after main action invoking and processing children items</param>
            <param name="afterListAction">Invokes after processing list of items</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
            <remarks>
            Checks returned values of <paramref name="beforeListFunc"/> and <paramref name="beforeFunc"/> 
            and process nodes by <paramref name="action"/> if <b>true</b>.
            Use <paramref name="beforeListFunc"/> and <paramref name="beforeFunc"/> if needs to skip some nodes.
            </remarks>
        </member>
        <member name="M:Xafari.Utils.RecursiveHelper.Recursive``2(``1,System.Collections.Generic.IEnumerable{``0},System.Func{``1,``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``1,``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},System.Boolean},System.Func{``1,``0,System.Boolean},System.Action{``1,``0},System.Action{``1,System.Collections.Generic.IEnumerable{``0}},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Recursive processing of hierarchical data.
            </summary>
            <typeparam name="TItem">Node type</typeparam> 
            <typeparam name="TContext">Context type</typeparam>
            <param name="context">Context object as processing node result</param>
            <param name="list">Root node list</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="beforeListFunc">Invokes before processing list of items. Processing list continue if result <b>true</b>.</param>
            <param name="beforeFunc">Invokes for every item before main action invoking. Processing node continue if result <b>true</b>.</param>
            <param name="action">Action to process node. Return new context for processing child items.</param>
            <param name="afterAction">Invokes for every item after main action invoking and processing children items</param>
            <param name="afterListAction">Invokes after processing list of items</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
            <remarks>
            Checks returned values of <paramref name="beforeListFunc"/> and <paramref name="beforeFunc"/> 
            and process nodes by <paramref name="action"/> if <b>true</b>.
            Use <paramref name="beforeListFunc"/> and <paramref name="beforeFunc"/> if needs to skip some nodes.
            </remarks>
        </member>
        <member name="M:Xafari.Utils.RecursiveHelper.Recursive``2(``1,System.Collections.Generic.IEnumerable{``0},System.Func{``1,``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``1,``0,System.Boolean},System.Func{``1,``0,``1},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Recursive processing of hierarchical data with method to check node for proccessing.
            </summary>
            <typeparam name="TItem">Node type</typeparam> 
            <typeparam name="TContext">Context type</typeparam>
            <param name="context">Context object as processing node result</param>
            <param name="list">Root node list</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="checkNodePredicate">Invokes for every item before main action invoking. Processing node continue if result <b>true</b>.</param>
            <param name="action">Action to process node. Return new context for processing child items.</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
            <remarks>
            Checks returned values of <paramref name="checkNodePredicate"/> 
            and process nodes by <paramref name="action"/> if <b>true</b>.
            </remarks>
        </member>
        <member name="M:Xafari.Utils.RecursiveHelper.Recursive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean},System.Action{``0},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Recursive processing of hierarchical data with method to check node for proccessing.
            </summary>
            <typeparam name="TItem">Node type</typeparam> 
            <param name="list">Root node list</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="checkNodePredicate">Invokes for every item before main action invoking. Processing node continue if result <b>true</b>.</param>
            <param name="action">Action to process node. Return new context for processing child items.</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
            <remarks>
            Checks returned values of <paramref name="checkNodePredicate"/> 
            and process nodes by <paramref name="action"/> if <b>true</b>.
            </remarks>
        </member>
        <member name="M:Xafari.Utils.RecursiveHelper.Recursive``2(``1,System.Collections.Generic.IEnumerable{``0},System.Func{``1,``0,System.Collections.Generic.IEnumerable{``0}},System.Action{``1,System.Collections.Generic.IEnumerable{``0}},System.Action{``1,``0},System.Func{``1,``0,``1},System.Action{``1,``0},System.Action{``1,System.Collections.Generic.IEnumerable{``0}},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Recursive processing of hierarchical data.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <typeparam name="TContext">Context type</typeparam>
            <param name="context">Context object as processing node result</param>
            <param name="list">Root node list</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="beforeListAction">Invokes before processing list of items.</param>
            <param name="beforeAction">Invokes for every item before main action invoking.</param>
            <param name="action">Action to process node. Return new context for processing child items.</param>
            <param name="afterAction">Invokes for every item after main action invoking and processing children items</param>
            <param name="afterListAction">Invokes after processing list of items</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
        </member>
        <member name="M:Xafari.Utils.RecursiveHelper.Recursive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{System.Collections.Generic.IEnumerable{``0},System.Boolean},System.Func{``0,System.Boolean},System.Action{``0},System.Action{``0},System.Action{System.Collections.Generic.IEnumerable{``0}},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Recursive processing of hierarchical data.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <param name="list">Root node list</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="beforeListFunc">Invokes before processing list of items. Processing list continue if result <b>true</b>.</param>
            <param name="beforeFunc">Invokes for every item before main action invoking. Processing list continue if result <b>true</b>.</param>
            <param name="action">Action to process node. Return new context for processing child items.</param>
            <param name="afterAction">Invokes for every item after main action invoking and processing children items</param>
            <param name="afterListAction">Invokes after processing list of items</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
        </member>
        <member name="M:Xafari.Utils.RecursiveHelper.Recursive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Action{System.Collections.Generic.IEnumerable{``0}},System.Action{``0},System.Action{``0},System.Action{``0},System.Action{System.Collections.Generic.IEnumerable{``0}},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Recursive processing of hierarchical data.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <param name="list">Root node list</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="beforeAction">Invokes for every item before main action invoking</param>
            <param name="action">Action to process node. Return new context for processing child items.</param>
            <param name="beforeListAction">Invokes before processing list of items</param>
            <param name="afterAction">Invokes for every item after main action invoking and processing children items</param>
            <param name="afterListAction">Invokes after processing list of items</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
        </member>
        <member name="M:Xafari.Utils.RecursiveHelper.Recursive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Action{``0},System.Action{System.Collections.Generic.IEnumerable{``0}},System.Action{``0},System.Action{``0},System.Action{System.Collections.Generic.IEnumerable{``0}},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Recursive processing of hierarchical data.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <param name="list">Root node list</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="beforeAction">Invokes for every item before main action invoking</param>
            <param name="action">Action to process node. Return new context for processing child items.</param>
            <param name="beforeListAction">Invokes before processing list of items</param>
            <param name="afterAction">Invokes for every item after main action invoking and processing children items</param>
            <param name="afterListAction">Invokes after processing list of items</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
        </member>
        <member name="M:Xafari.Utils.RecursiveHelper.Recursive``2(``1,``0,System.Func{``1,``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``1,``0,``1},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Recursive processing of hierarchical data.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <typeparam name="TContext">Context type</typeparam>
            <param name="context">Context object as processing node result</param>
            <param name="root">Root object</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="action">Action to process node. Return new context for processing child items.</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
        </member>
        <member name="M:Xafari.Utils.RecursiveHelper.Recursive``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Action{``0},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Recursive processing of hierarchical data.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <param name="root">Root object</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="action">Action to process node. Return new context for processing child items.</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
        </member>
        <member name="M:Xafari.Utils.RecursiveHelper.ITreeNodeRecursive``1(``0,System.Collections.Generic.IEnumerable{DevExpress.Persistent.Base.General.ITreeNode},System.Func{``0,DevExpress.Persistent.Base.General.ITreeNode,``0},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Recursive processing of <see cref="T:DevExpress.Persistent.Base.General.ITreeNode"/> data.
            </summary>
            <typeparam name="TContext">Context type</typeparam>
            <param name="context">Context object as processing node result</param>
            <param name="list">Root node list</param>
            <param name="action">Action to process node. Return new context for processing child items.</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
        </member>
        <member name="M:Xafari.Utils.RecursiveHelper.ITreeNodeRecursive(System.Collections.Generic.IEnumerable{DevExpress.Persistent.Base.General.ITreeNode},System.Action{DevExpress.Persistent.Base.General.ITreeNode},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Recursive processing of <see cref="T:DevExpress.Persistent.Base.General.ITreeNode"/> data.
            </summary>
            <param name="list">Root node list</param>
            <param name="action">Action to process node. Return new context for processing child items.</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
        </member>
        <member name="M:Xafari.Utils.RecursiveHelper.RecursiveFind``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Find item by predicate by items list.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <param name="list">Root node list</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="predicate">Function to compare node with path item</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.RecursiveHelper.RecursiveFind``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Find item by predicate by items list.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <param name="root">Root node</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="predicate">Function to compare node with path item</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.RecursiveHelper.FindByPath``2(System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1,System.Boolean},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Find item by path represented by items list.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <typeparam name="TPathItem">Path item type</typeparam>
            <param name="path">Path to node</param>
            <param name="list">Root node list</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="predicate">Function to compare node with path item</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.RecursiveHelper.FindByPath``2(System.Collections.Generic.IEnumerable{``1},``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1,System.Boolean},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Find item by path represented by items list.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <typeparam name="TPathItem">Path item type</typeparam>
            <param name="path">Path to node</param>
            <param name="root">Root node</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="predicate">Function to compare node with path item</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.RecursiveHelper.FindByPath``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.String,System.Boolean},System.Char[],Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Find item by path.
            Uses chars '/', '\' as delimeter.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <param name="pathStr">Path to node</param>
            <param name="list">Root node list</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="predicate">Function to compare node with path item</param>
            <param name="delimeters">Specifies delimeters chars. By default uses '/' and '\'.</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.RecursiveHelper.FindByPath``1(System.String,``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.String,System.Boolean},System.Char[],Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Find item by path represented by items list.
            Uses chars '/', '\' as delimeter.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <param name="pathStr">Path to node</param>
            <param name="root">Root node</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="predicate">Function to compare node with path item</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
            <param name="delimeters">Specifies delimeters chars. By default uses '/' and '\'.</param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.RecursiveHelper.FindByPath(System.String,DevExpress.Persistent.Base.General.ITreeNode,System.Char[],Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Find <see cref="T:DevExpress.Persistent.Base.General.ITreeNode"/> by path.
            Uses chars '/', '\' as delimeter.
            </summary>
            <param name="pathStr">Path to node</param>
            <param name="root">Root node</param>
            <param name="delimeters">Specifies delimeters chars. By default uses '/' and '\'.</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.RecursiveHelper.ToList``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Convert from hierarchical data to list.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <param name="list">Root node list</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.RecursiveHelper.ToList``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Convert from hierarchical data to list.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <param name="list">Root node list</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="predicate">Function to compare node with path item</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.RecursiveHelper.ToList``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},Xafari.Utils.RecursiveHelper.CycleExeptionMode)">
            <summary>
            Convert from hierarchical data to list.
            </summary>
            <typeparam name="TItem">Node type</typeparam>
            <param name="root">Root node</param>
            <param name="getChildren">Function to calculate children node list</param>
            <param name="cycleExeptionMode"> Determines the effect of the cycle </param>
            <returns></returns>
        </member>
        <member name="T:Xafari.Utils.StackOverflowDetectHelper">
            <summary>
            Used to detect any stack overflow exceptions.
            </summary>
        </member>
        <member name="M:Xafari.Utils.StackOverflowDetectHelper.SafeAction(System.Action,System.String,System.Object[])">
            <summary>
            Safely executes specified <see cref="!:action"/> and detect recursive call.
            </summary>
            <exception cref="T:System.InvalidOperationException">Occurs if infinite cycle is detected.</exception>
            <param name="action">Action to execute.</param>
            <param name="exceptionMessage">Exception message.</param>
            <param name="context">Context objects to detect recursive call.</param>
        </member>
        <member name="M:Xafari.Utils.StackOverflowDetectHelper.SafeAction``1(``0,System.Action{``0},System.String)">
            <summary>
            Safely executes specified <see cref="!:action"/> and detect recursive call.
            </summary>
            <exception cref="T:System.InvalidOperationException">Occurs if infinite cycle is detected.</exception>
            <param name="action">Action to execute.</param>
            <param name="exceptionMessage">Exception message.</param>
            <param name="context1">Context object to detect recursive call.</param>
        </member>
        <member name="M:Xafari.Utils.StackOverflowDetectHelper.SafeAction``2(``0,``1,System.Action{``0,``1},System.String)">
            <summary>
            Safely executes specified <see cref="!:action"/> and detect recursive call.
            </summary>
            <exception cref="T:System.InvalidOperationException">Occurs if infinite cycle is detected.</exception>
            <param name="action">Action to execute.</param>
            <param name="exceptionMessage">Exception message.</param>
            <param name="context1">First context object to detect recursive call.</param>
            <param name="context2">Second context object to detect recursive call.</param>
        </member>
        <member name="M:Xafari.Utils.StackOverflowDetectHelper.SafeAction``3(``0,``1,``2,System.Action{``0,``1,``2},System.String)">
            <summary>
            Safely executes specified <see cref="!:action"/> and detect recursive call.
            </summary>
            <exception cref="T:System.InvalidOperationException">Occurs if infinite cycle is detected.</exception>
            <param name="action">Action to execute.</param>
            <param name="exceptionMessage">Exception message.</param>
            <param name="context1">First context object to detect recursive call.</param>
            <param name="context2">Second context object to detect recursive call.</param>
            <param name="context3">Third context object to detect recursive call.</param>
        </member>
        <member name="M:Xafari.Utils.StackOverflowDetectHelper.SafeFunc``1(System.Func{``0},System.String,System.Object[])">
            <summary>
            Safely executes specified <see cref="!:func"/> and detect recursive call.
            </summary>
            <exception cref="T:System.InvalidOperationException">Occurs if infinite cycle is detected.</exception>
            <param name="func">Function to execute.</param>
            <param name="exceptionMessage">Exception message.</param>
            <param name="context">Context objects to detect recursive call.</param>
        </member>
        <member name="M:Xafari.Utils.StackOverflowDetectHelper.SafeFunc``2(``0,System.Func{``0,``1},System.String)">
            <summary>
            Safely executes specified <see cref="!:func"/> and detect recursive call.
            </summary>
            <exception cref="T:System.InvalidOperationException">Occurs if infinite cycle is detected.</exception>
            <param name="func">Function to execute.</param>
            <param name="exceptionMessage">Exception message.</param>
            <param name="context1">Context object to detect recursive call.</param>
        </member>
        <member name="M:Xafari.Utils.StackOverflowDetectHelper.SafeFunc``3(``0,``1,System.Func{``0,``1,``2},System.String)">
            <summary>
            Safely executes specified <see cref="!:func"/> and detect recursive call.
            </summary>
            <exception cref="T:System.InvalidOperationException">Occurs if infinite cycle is detected.</exception>
            <param name="func">Function to execute.</param>
            <param name="exceptionMessage">Exception message.</param>
            <param name="context1">First context object to detect recursive call.</param>
            <param name="context2">Second context object to detect recursive call.</param>
        </member>
        <member name="M:Xafari.Utils.StackOverflowDetectHelper.SafeFunc``4(``0,``1,``2,System.Func{``0,``1,``2,``3},System.String)">
            <summary>
            Safely executes specified <see cref="!:func"/> and detect recursive call.
            </summary>
            <exception cref="T:System.InvalidOperationException">Occurs if infinite cycle is detected.</exception>
            <param name="func">Function to execute.</param>
            <param name="exceptionMessage">Exception message.</param>
            <param name="context1">First context object to detect recursive call.</param>
            <param name="context2">Second context object to detect recursive call.</param>
            <param name="context3">Third context object to detect recursive call.</param>
        </member>
        <member name="M:Xafari.Utils.StackOverflowDetectHelper.ExactlyOnceAction(System.Action,System.Object[])">
            <summary>
            Executes action <paramref name="handler"/> exactly once.
            </summary>
            <param name="handler">Handler to execute.</param>
            <param name="context">Context objects to detect recursive call.</param>
        </member>
        <member name="M:Xafari.Utils.StackOverflowDetectHelper.ExactlyOnceAction``1(``0,System.Action{``0})">
            <summary>
            Executes action <paramref name="handler"/> exactly once.
            </summary>
            <param name="handler">Handler to execute.</param>
            <param name="context1">Context object to detect recursive call.</param>
        </member>
        <member name="M:Xafari.Utils.StackOverflowDetectHelper.ExactlyOnceAction``2(``0,``1,System.Action{``0,``1})">
            <summary>
            Executes action <paramref name="handler"/> exactly once.
            </summary>
            <param name="handler">Handler to execute.</param>
            <param name="context1">First context object to detect recursive call.</param>
            <param name="context2">Second context object to detect recursive call.</param>
        </member>
        <member name="M:Xafari.Utils.StackOverflowDetectHelper.ExactlyOnceAction``3(``0,``1,``2,System.Action{``0,``1,``2})">
            <summary>
            Executes action <paramref name="handler"/> exactly once.
            </summary>
            <param name="handler">Handler to execute.</param>
            <param name="context1">First context object to detect recursive call.</param>
            <param name="context2">Second context object to detect recursive call.</param>
            <param name="context3">Third context object to detect recursive call.</param>
        </member>
        <member name="M:Xafari.Utils.StackOverflowDetectHelper.ExactlyOnceAction``1(System.Boolean@,``0,System.Action{``0})">
            <summary>
            Executes action <paramref name="handler"/> exactly once.
            </summary>
            <param name="handler">Handler to execute.</param>
            <param name="flag">Value to store recursive flag.</param>
            <param name="context1">Context object to detect recursive call.</param>
        </member>
        <member name="M:Xafari.Utils.StackOverflowDetectHelper.ExactlyOnceFunc``2(``0,System.Func{``0,``1})">
            <summary>
            Executes func <paramref name="handler"/> exactly once.
            </summary>
            <param name="handler">Handler to execute.</param>
            <param name="context1">First context object to detect recursive call.</param>
            <returns>
            Returns default value for <typeparamref name="TResult"/> if invoked twice.
            </returns>
        </member>
        <member name="M:Xafari.Utils.StackOverflowDetectHelper.ExactlyOnceFunc``3(``0,``1,System.Func{``0,``1,``2})">
            <summary>
            Executes func <paramref name="handler"/> exactly once.
            </summary>
            <param name="handler">Handler to execute.</param>
            <param name="context1">First context object to detect recursive call.</param>
            <param name="context2">Second context object to detect recursive call.</param>
            <returns>
            Returns default value for <typeparamref name="TResult"/> if invoked twice.
            </returns>
        </member>
        <member name="M:Xafari.Utils.StackOverflowDetectHelper.ExactlyOnceFunc``4(``0,``1,``2,System.Func{``0,``1,``2,``3})">
            <summary>
            Executes func <paramref name="handler"/> exactly once.
            </summary>
            <param name="handler">Handler to execute.</param>
            <param name="context1">First context object to detect recursive call.</param>
            <param name="context2">Second context object to detect recursive call.</param>
            <param name="context3">Third context object to detect recursive call.</param>
            <returns>
            Returns default value for <typeparamref name="TResult"/> if invoked twice.
            </returns>
        </member>
        <member name="M:Xafari.Utils.StackOverflowDetectHelper.ExactlyOnceFunc``1(System.Func{``0},System.Object[])">
            <summary>
            Executes func <paramref name="handler"/> exactly once.
            </summary>
            <param name="handler">Handler to execute.</param>
            <param name="context">Context objects to detect recursive call.</param>
            <returns>
            Returns default value for <typeparamref name="TResult"/> if invoked twice.
            </returns>
        </member>
        <member name="M:Xafari.Utils.StackOverflowDetectHelper.ExactlyOnceFunc``2(System.Boolean@,``0,System.Func{``0,``1})">
            <summary>
            Executes func <paramref name="handler"/> exactly once.
            </summary>
            <param name="handler">Handler to execute.</param>
            <param name="flag">Value to store recursive flag.</param>
            <param name="context1">Context object to detect recursive call.</param>
            <returns>
            Returns default value for <typeparamref name="TResult"/> if invoked twice.
            </returns>
        </member>
        <member name="T:Xafari.Utils.IComparerExt`1">
            <summary>
            Defines a method that a type implements to compare two objects.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <seealso cref="T:Xafari.Utils.TypeComparerExt"/>
        </member>
        <member name="M:Xafari.Utils.IComparerExt`1.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>Nullable <see cref="T:System.Int32"/>.
            If value less than zero - <paramref name="x"/> is less than <paramref name="y"/>.
            If value greater than zero - <paramref name="x"/> is greater than <paramref name="y"/>.
            If zero returned - <paramref name="x"/> equals <paramref name="y"/>.
            Null - undefinded. Parameter <paramref name="x"/> can be greater or less than <paramref name="y"/> and both results are correct.</returns>
        </member>
        <member name="T:Xafari.Utils.TypeComparerExt">
            <summary>
            Implement <see cref="M:Xafari.Utils.IComparerExt`1.Compare(`0,`0)"/> method to compare two <see cref="T:System.Type"/> instances.
            Direct sorting moves derived types on top.
            Inverse sorting moves base types on top.
            </summary>
            <remarks>
            Used by <see cref="!:Extensions.OrderBy()"/>.
            </remarks>
        </member>
        <member name="M:Xafari.Utils.TypeComparerExt.Compare(System.Type,System.Type)">
            <summary>
            Compares two <see cref="T:System.Type"/> instances.
            </summary>
            <param name="x">First type instance</param>
            <param name="y">Second type instance</param>
            <returns>
            0 - if <paramref name="x"/> and <paramref name="y"/> are the same.
            1 - if <paramref name="x"/> is derived from <paramref name="y"/>.
            -1 - if <paramref name="y"/> is derived from <paramref name="x"/>.
            null - if <paramref name="x"/> and <paramref name="y"/> are not related by inheritance.
            </returns>
        </member>
        <member name="M:Xafari.Utils.XafariHelperBase`1.GetHelper``1(`0)">
            <summary>
            Creates an instance of <typeparamref name="THelper"/> for specified <paramref name="obj"/>.
            </summary>
            <typeparam name="THelper">Type of helper.</typeparam>
            <param name="obj">Instance of target object.</param>
            <returns>
            Try to create <see cref="T:Xafari.Utils.IDisposableExt2Facade"/> for specified <paramref name="obj"/>. if ok, then try to find helper instance in the cache.
            Creates new helper instance and returns it as result. Also put this instance to the cache if this is possible.
            Helper instance automatically removed from the cache after the target object is disposed.
            </returns>
        </member>
        <member name="M:Xafari.Utils.XafariHelperBase.GetDelegate``1(System.Type,System.Object,System.String)">
            <summary>
            Creates the specified delegate for <paramref name="instance"/> from specified <paramref name="methodName"/>.
            </summary>
            <typeparam name="THandler"></typeparam>
            <param name="type"></param>
            <param name="instance"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.XafariHelperBase.InvokeFuncNotOverride``1(System.String,System.Type[],System.Object[])">
            <summary>
            Invoke base method without override.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="methodName"></param>
            <param name="types"></param>
            <param name="parameters"></param>
            <returns></returns>
            <remarks>
            Implemented based on http://stackoverflow.com/questions/4357729/use-reflection-to-invoke-an-overridden-base-method
            </remarks>
        </member>
        <member name="M:Xafari.Utils.XafariHelperBase.InvokeFuncNotOverride``2(System.String,``0)">
            <summary>
            Invoke base method without override.
            </summary>
            <typeparam name="TArg0"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="methodName"></param>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.XafariHelperBase.InvokeFuncNotOverride``3(System.String,``0,``1)">
            <summary>
            Invoke base method without override.
            </summary>
            <typeparam name="TArg0"></typeparam>
            <typeparam name="TArg1"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="methodName"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Xafari.Utils.XafariHelperBase.InvokeActionNotOverride(System.String,System.Type[],System.Object[])">
            <summary>
            Invoke base method without override.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="methodName"></param>
            <param name="types"></param>
            <param name="parameters"></param>
            <returns></returns>
            <remarks>
            Implemented based on http://stackoverflow.com/questions/4357729/use-reflection-to-invoke-an-overridden-base-method
            </remarks>
        </member>
        <member name="T:Xafari.Utils.XafariHelperBase`3">
            <summary>
            Base class to implement helper for derived types.
            </summary>
            <typeparam name="T">Target type for helper.</typeparam>
            <typeparam name="TBase">Base type for <typeparamref name="T"/>.</typeparam>
            <typeparam name="TBaseHelper">Helper for <typeparamref name="TBase"/>.</typeparam>
        </member>
        <member name="P:Xafari.Utils.XafariHelperBase`3.BaseHelper">
            <summary>
            Base helper for derived helpers.
            </summary>
        </member>
        <member name="T:Xafari.Utils.XafariHelperExtensionBase`2">
            <summary>
            Base class to implement helper extensions.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="THelper"></typeparam>
            <remarks>
            Use <see cref="T:Xafari.Utils.XafariHelperBase`3"/> to implement extension for derived types.
            </remarks>
        </member>
    </members>
</doc>
